package io.specmatic.gradle.versioninfo

import org.gradle.api.Project
import org.gradle.api.java.archives.Manifest

const val AUTO_GENERATED_CODE_WARNING =
    """this file is auto-generated by the specmatic gradle plugin. Any changes will be lost!"""

internal fun Project.kotlinPackage(): String {
    if (this == this.rootProject) {
        return group.toString().lowercase().replace("[^a-zA-Z0-9]".toRegex(), ".")
    }
    return "${group}.${name}".lowercase().replace("[^a-zA-Z0-9]".toRegex(), ".")
}

internal fun Project.kotlinPackageDir(): String {
    return kotlinPackage().replace(".", "/")
}

data class ProjectVersionInfo(
    val version: String,
    val gitCommit: String,
    val group: String,
    val name: String,
    val kotlinPackageName: String,
    val isRootProject: Boolean,
    val timestamp: String?
) {
    fun toKotlinClass(): String {
        return """
            // $AUTO_GENERATED_CODE_WARNING
            package $kotlinPackageName

            object VersionInfo {
                val version = "$version"
                val gitCommit = "$gitCommit"
                val gitShortCommit = "${shortCommit()}"
                val group = "$group"
                val name = "$name"
                ${maybeKotlinTimestamp()}
                
                fun describe() = "v${version}(${shortCommit()})${if (timestamp != null) " built at $timestamp" else ""}"
            }
        """.trimIndent()
    }

    private fun shortCommit() = gitCommit.take(8).trim()

    fun packageDir() = kotlinPackageName.replace(".", "/")
    fun kotlinFilePath() = "${packageDir()}/VersionInfo.kt"
    fun propertiesFilePath() = "${packageDir()}/version.properties"


    fun toPropertiesFile(): String {
        return """
            # $AUTO_GENERATED_CODE_WARNING
            version=$version
            gitCommit=$gitCommit
            gitShortCommit=${shortCommit()}
            group=$group
            name=$name
            ${maybePropertyTimestamp()}
        """.trimIndent()
    }

    fun addToManifest(manifest: Manifest) {
        if (timestamp != null) {
            manifest.attributes["x-specmatic-compile-timestamp"] = timestamp
        }

        manifest.attributes["x-specmatic-version"] = version
        manifest.attributes["x-specmatic-group"] = group
        manifest.attributes["x-specmatic-name"] = name
        manifest.attributes["x-specmatic-git-sha"] = gitCommit
        manifest.attributes["x-specmatic-git-short-sha"] = shortCommit()
    }

    private fun maybeKotlinTimestamp() = if (timestamp != null) "val timestamp = \"$timestamp\"" else ""
    private fun maybePropertyTimestamp() = if (timestamp != null) "timestamp=$timestamp" else ""

}
