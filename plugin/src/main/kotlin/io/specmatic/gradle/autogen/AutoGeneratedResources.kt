package io.specmatic.gradle.autogen

import io.specmatic.gradle.SpecmaticGradlePlugin
import io.specmatic.gradle.versioninfo.AUTO_GENERATED_CODE_WARNING
import io.specmatic.gradle.versioninfo.ProjectVersionInfo
import io.specmatic.gradle.versioninfo.kotlinPackage
import io.specmatic.gradle.versioninfo.kotlinPackageDir
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.tasks.Delete
import org.gradle.api.tasks.SourceSetContainer
import org.gradle.api.tasks.TaskProvider
import org.gradle.api.tasks.bundling.AbstractArchiveTask
import org.gradle.api.tasks.compile.JavaCompile
import org.gradle.kotlin.dsl.get
import org.gradle.kotlin.dsl.the
import org.gradle.language.jvm.tasks.ProcessResources
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.io.File

internal fun Project.generatedResourcesDir(): File = file("src/main/gen-resources")

internal fun Project.generatedKotlinSourcesDir(): File = file("src/main/gen-kt")

internal fun Project.registerAutoGeneratedKotlinSourceTask(vararg tasks: Any?) {
    setupAutoGeneratedResourceHookTasks()
    project.getOrCreateAutoGenerateKotlinSourcesTask().configure {
        dependsOn(tasks)
    }
}

internal fun Project.registerAutoGeneratedResourcesTask(vararg tasks: Any?) {
    setupAutoGeneratedResourceHookTasks()
    project.getOrCreateAutoGenerateResourcesTask().configure {
        dependsOn(tasks)
    }
}

internal fun Project.createVersionPropertiesFileTask(
    versionInfoForProject: ProjectVersionInfo
) {
    val task = tasks.register("createVersionPropertiesFile") {
        group = "build"

        inputs.property("projectVersion", versionInfoForProject.toString())
        val versionPropertiesFile = generatedResourcesDir().resolve(versionInfoForProject.propertiesFilePath())
        outputs.file(versionPropertiesFile)

        doLast {
            versionPropertiesFile.parentFile.mkdirs()
            versionPropertiesFile.writeText(versionInfoForProject.toPropertiesFile())
        }
    }

    registerAutoGeneratedResourcesTask(task)
}

internal fun Project.createVersionInfoKotlinTask(
    versionInfoForProject: ProjectVersionInfo
) {
    val task = tasks.register("createVersionInfoKotlin") {
        group = "build"
        inputs.property("projectVersion", versionInfoForProject.toString())
        val versionInfoFile = generatedKotlinSourcesDir().resolve(versionInfoForProject.kotlinFilePath())
        outputs.file(versionInfoFile)

        doLast {
            versionInfoFile.parentFile.mkdirs()
            versionInfoFile.writeText(versionInfoForProject.toKotlinClass())
        }
    }

    registerAutoGeneratedKotlinSourceTask(task)
}

internal fun Project.createLogbackXMLFileTask() {
    val task = tasks.register("createLogbackXMLResource") {
        group = "build"
        val logbackXMLFile = generatedResourcesDir().resolve("logback.xml")
        outputs.file(logbackXMLFile)
        doLast {
            logbackXMLFile.parentFile.mkdirs()
            val templateStream =
                SpecmaticGradlePlugin::class.java.classLoader.getResourceAsStream("logback-template.xml")
                    ?: throw IllegalStateException("Unable to find logback-template.xml in classpath")

            logbackXMLFile.writeBytes(templateStream.readBytes())
        }
    }

    registerAutoGeneratedResourcesTask(task)
}

internal fun Project.createJULLogForwarderClassTask() {
    val task = tasks.register("createJULForwarderClass") {
        group = "build"
        val julForwarderFile =
            generatedKotlinSourcesDir().resolve(project.kotlinPackageDir()).resolve("JULForwarder.kt")
        outputs.file(julForwarderFile)
        doLast {
            julForwarderFile.parentFile.mkdirs()
            julForwarderFile.writeText(
                """
                // $AUTO_GENERATED_CODE_WARNING
                package ${project.kotlinPackage()}
                
                import org.slf4j.bridge.SLF4JBridgeHandler
                import java.util.logging.LogManager
                
                object JULForwarder {
                    fun forward() {
                        LogManager.getLogManager().reset()
                        SLF4JBridgeHandler.removeHandlersForRootLogger()
                        SLF4JBridgeHandler.install()
                    }
                }
            """.trimIndent()
            )
        }
    }

    registerAutoGeneratedKotlinSourceTask(task)
}

private fun Project.setupAutoGeneratedResourceHookTasks() {
    val generatedKotlinSourcesDir = generatedKotlinSourcesDir()
    val generatedResourcesDir = generatedResourcesDir()

    tasks.withType(Delete::class.java) {
        delete(generatedKotlinSourcesDir)
        delete(generatedResourcesDir)
    }

    val autoGenerateResources = getOrCreateAutoGenerateResourcesTask()

    val autoGenerateKotlinSources = getOrCreateAutoGenerateKotlinSourcesTask()

    tasks.withType(ProcessResources::class.java) {
        dependsOn(autoGenerateResources)
    }
    tasks.withType(JavaCompile::class.java) {
        dependsOn(autoGenerateKotlinSources)
    }
    tasks.withType(KotlinCompile::class.java) {
        dependsOn(autoGenerateKotlinSources)
    }
    tasks.withType(AbstractArchiveTask::class.java) {
        dependsOn(autoGenerateKotlinSources)
        dependsOn(autoGenerateResources)
    }

    plugins.withType(JavaPlugin::class.java) {
        if (!project.the<SourceSetContainer>()["main"].java.srcDirs.contains(project.generatedKotlinSourcesDir())) {
            project.the<SourceSetContainer>()["main"].java.srcDir(project.generatedKotlinSourcesDir())
        }

        if (!project.the<SourceSetContainer>()["main"].resources.srcDirs.contains(project.generatedResourcesDir())) {
            project.the<SourceSetContainer>()["main"].resources.srcDir(project.generatedResourcesDir())
        }
    }
}

private fun Project.getOrCreateAutoGenerateKotlinSourcesTask(): TaskProvider<Task> {
    if (project.tasks.findByName("autoGenerateKotlinSources") != null) {
        return project.tasks.named("autoGenerateKotlinSources")
    }

    return tasks.register("autoGenerateKotlinSources") {
        group = "build"
        description = "Hook to auto-generate sources"
    }
}

private fun Project.getOrCreateAutoGenerateResourcesTask(): TaskProvider<Task> {
    if (project.tasks.findByName("autoGenerateResources") != null) {
        return project.tasks.named("autoGenerateResources")
    }

    return tasks.register("autoGenerateResources") {
        group = "build"
        description = "Hook to auto-generate resources"
    }
}
