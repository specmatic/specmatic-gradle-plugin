package io.specmatic.gradle.versioninfo

import io.specmatic.gradle.autogen.*
import io.specmatic.gradle.license.pluginInfo
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPlugin

class VersionInfoPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        project.setupAutoGeneratedResourceHookTasks()

        project.plugins.withType(JavaPlugin::class.java) {
            if (project.group.toString().isBlank()) {
                throw GradleException("Set your project group in the `gradle.properties`, not in the `build.gradle.kts` file")
            }

            if (project.version.toString().isEmpty()) {
                throw GradleException("Set your project version in the `gradle.properties`, not in the `build.gradle.kts` file")
            }

            project.pluginInfo("Configuring version properties file")

            val versionInfoForProject = project.versionInfo()

            val createVersionInfoKotlinTask = project.tasks.register("createVersionInfoKotlin") {
                group = "build"
                inputs.property("projectVersion", versionInfoForProject.toString())
                outputs.file(project.generatedKotlinSourcesDir().resolve(versionInfoForProject.kotlinFilePath()))

                doLast {
                    project.generatedKotlinSourcesDir()
                        .resolve(versionInfoForProject.kotlinFilePath()).parentFile.mkdirs()
                    project.generatedKotlinSourcesDir().resolve(versionInfoForProject.kotlinFilePath())
                        .writeText(versionInfoForProject.toKotlinClass())
                }
            }

            project.registerAutoGeneratedKotlinSourceTask(createVersionInfoKotlinTask)

            val createVersionPropertiesFileTask = project.tasks.register("createVersionPropertiesFile") {
                group = "build"

                inputs.property("projectVersion", versionInfoForProject.toString())
                outputs.file(project.generatedResourcesDir().resolve(versionInfoForProject.propertiesFilePath()))

                doLast {
                    project.generatedResourcesDir()
                        .resolve(versionInfoForProject.propertiesFilePath()).parentFile.mkdirs()
                    project.generatedResourcesDir().resolve(versionInfoForProject.propertiesFilePath())
                        .writeText(versionInfoForProject.toPropertiesFile())
                }
            }

            project.registerAutoGeneratedResourcesTask(createVersionPropertiesFileTask)
        }
    }
}
